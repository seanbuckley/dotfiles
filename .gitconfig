# Windows helpers
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
	
[user]
	name = Sean Buckley
	email = seanbuckley@users.noreply.github.com

# --- Required for Windows SSH
[credential]
	helper = manager

# --- Required for Linux/WSL SSH
[credential]
	helper = cache

[color]
	ui = true

# Set VS Code as default git editor
#[core]
#  editor = code --wait

# Set git specific aliases
[alias]
	aliases = config --get-regexp alias
	amend = commit -a --amend
	br = branch
	ci = commit
	co = checkout
	co-recurse = !sh -c 'git checkout $1 && git submodule update --recursive' - # Checkout a repo and it's (recursive) submodules
	cob = checkout -b
	cp = cherry-pick
	df = diff
	dump = cat-file -p
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	lc = log ORIG_HEAD.. --stat --no-merges # List all new commits after you fetched, with stats, but excluding merges
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --branches
	llog = log --date=local # Just like git log, but will display dates in local timezone
	new = !sh -c 'git log $1@{1}..$1@{0} "$@"' # See what new commits have been created by the last command (typically after a "git pull")
	prune-all = !git remote | xargs -n 1 git remote prune # Prune all stale remote branches
	ra = rebase --abort # Use if you have trouble with merge conflict
	rc = rebase --continue # Use after resolving conflicts
	rs = rebase --skip # Nothing to resolve move along
	st = status
	type = cat-file -t
	undo = reset HEAD~1 --mixed
	undopush= push -f origin HEAD^:master
	untrack = rm --cache -- # Untrack a file
	who = shortlog -s --
	whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -" # Get project history from a name or email address
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short # Get project history from a commit name
	master= checkout master

	# Last 10 Branches https://ses4j.github.io/2020/04/01/git-alias-recent-branches/
	# lb = !git reflog show --pretty=format:'%gs ~ %gd' --date=relative | grep 'checkout:' | grep -oE '[^ ]+ ~ .*' | awk -F~ '!seen[$1]++' | head -n 10 | awk -F' ~ HEAD@{' '{printf(\"  \\033[33m%s: \\033[37m %s\\033[0m\\n\", substr($2, 1, length($2)-1), $1)}'

	# Delete all remote tracking Git branches where the upstream branch has been deleted https://about.gitlab.com/blog/2020/04/17/dotfiles-document-and-automate-your-macbook-setup/
	# git_prune = "git fetch --prune && git branch -vv | grep 'origin/.*: gone]' | awk '{print \$1}' | xargs git branch -d"
